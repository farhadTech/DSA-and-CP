----------------------------------------
VECTOR
----------------------------------------
#include<iostream>
#include<vector>
using namespace std;
int main(){
    //Initialization & declaration
    std::vector<int> myVector={5,10,15,20};
    for(int num:myVector){
        std::cout<<num<<" ";
    }
    std::cout<<endl;

    //inserting one element
    myVector.push_back(30);
    for(int num:myVector){
        std::cout<<num<<" ";
    }
    std::cout<<endl;

    //deleting element
    myVector.pop_back();
    myVector.pop_back();
    for(int num:myVector){
        std::cout<<num<<" ";
    }
    std::cout<<endl;

    //replacing old values with new one
    myVector.assign({1,2,3,4});
    for(int num:myVector){
        std::cout<<num<<" ";
    }
    std::cout<<endl;

    //inserting new element at specific position
    myVector.insert(myVector.begin()+2,40);
    for(int num:myVector){
        std::cout<<num<<" ";
    }
    std::cout<<endl;

    //deleting element from special position
    myVector.erase(myVector.begin()+1);
    for(int num:myVector){
        std::cout<<num<<" ";
    }
    std::cout<<endl;

    //Removes all elements from the vector
    myVector.clear();
    for(int num:myVector){
        std::cout<<num<<" ";
    }
    std::cout<<endl;

    myVector.emplace(myVector.begin()+2, 55);
    myVector.emplace_back(88);
    for(int num:myVector){
        std::cout<<num<<" ";
    }
    return 0;

}
-----------------------------------------
VECTOR Capacity
-----------------------------------------
#include<vector>
#include<iostream>
using namespace std;
int main(){
    std::vector<int> myVector={1,2,3,4,5,6,7};
    std::cout<<"Size: "<<myVector.size()<<endl;
    std::cout<<"Maximum Size: "<<myVector.max_size()<<endl;
    std::cout<<"Capacity: "<<myVector.capacity()<<endl;
    myVector.resize(9);
    for(int x:myVector){
        std::cout<<x<<" ";
    }
    std::cout<<endl;
    //myVector.clear();
    std::cout<<"Empty or not: "<<myVector.empty()<<endl;
    myVector.resize(3);
    myVector.shrink_to_fit();
    for(int x:myVector){
        std::cout<<x<<" ";
    }
    return 0;
}

-----------------------------------------------
problem 1
-----------------------------------------------
#include<iostream>
#include<vector>
#include<cctype>
int main(){
    int num, i;
    std::cout<<"How many words? ";
    std::cin>>num;

    std::vector<std::string> myVector;
    for(i=0; i<num; i++){
        std::string word;
        std::cin>>word;
        myVector.push_back(word);
    }
    for(std::string& word:myVector){
        if(!word.empty()){
            word[0]=std::toupper(word[0]);
        }
    }
    for(const std::string& x:myVector){
        std::cout<<x<<" ";
    }

}
------------------------------------------
STACK
------------------------------------------
#include<iostream>
#include<stack>
using namespace std;
int main(){
    std::stack<int> myStack;
    myStack.push(10);
    myStack.push(20);
    myStack.push(30);

    std::cout<<"Top element: "<<myStack.top()<<endl;
    myStack.pop();
    std::cout<<"Top element: "<<myStack.top()<<endl;

    if(myStack.empty()){
        std::cout<<"Stack is empty"<<endl;
    }
    else{
        std::cout<<"Stack is not empty"<<endl;
    }

    cout << "Size of stack: " << myStack.size() << endl;

    return 0;
}

------------------------------------------------------
Queue
------------------------------------------------------
#include<iostream>
#include<queue>
using namespace std;
int main(){
    std::queue<int> myQueue;
    myQueue.push(10);
    myQueue.push(20);
    myQueue.push(30);
    std::cout<<"The front element: "<<myQueue.front() <<std::endl;
    std::cout<<"The back element: "<<myQueue.back()<<std::endl;
    myQueue.pop();
    std::cout<<"The front element: "<<myQueue.front()<<std::endl;
    if (myQueue.empty()) {
        cout << "Queue is empty." << endl;
    }
    else {
        cout << "Queue is not empty." << endl;
    }
    cout << "Queue Size: " << myQueue.size() << endl;

    std::queue<int> secondQueue;
    secondQueue.push(1);
    secondQueue.push(2);
    secondQueue.push(3);
    std::cout<<"The front element of second queue: "<<secondQueue.front()<<std::endl;
    myQueue.swap(secondQueue);
    std::cout<<"The front element of second queue after swap: "<<secondQueue.front()<<std::endl;

    //printing whole queue together
    std::queue<int> tempQueue = myQueue;
    std::cout << "Elements of the first queue: ";
    while (!tempQueue.empty()) {
        std::cout << tempQueue.front() << " ";
        tempQueue.pop();
    }
    std::cout << std::endl;
    tempQueue = secondQueue;
    std::cout << "Elements of the second queue: ";
    while (!tempQueue.empty()) {
        std::cout << tempQueue.front() << " ";
        tempQueue.pop();
    }
    std::cout << std::endl;

    return 0;
}
-----------------------------------------------------